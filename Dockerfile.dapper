FROM registry.suse.com/bci/bci-base:15.3

ARG DAPPER_HOST_ARCH=amd64
ARG http_proxy
ARG https_proxy
ENV HOST_ARCH=${DAPPER_HOST_ARCH} ARCH=${DAPPER_HOST_ARCH}

# Setup environment
ENV PATH /go/bin:$PATH
ENV DAPPER_DOCKER_SOCKET true
ENV DAPPER_ENV TAG REPO
ENV DAPPER_OUTPUT bin
ENV DAPPER_RUN_ARGS --privileged --tmpfs /go/src/github.com/longhorn/longhorn-engine/integration/.venv:exec --tmpfs /go/src/github.com/longhorn/longhorn-engine/integration/.tox:exec -v /dev:/host/dev -v /proc:/host/proc
ENV DAPPER_SOURCE /go/src/github.com/longhorn/longhorn-instance-manager
WORKDIR ${DAPPER_SOURCE}


RUN zypper refresh && \
    zypper -n addrepo --refresh https://download.opensuse.org/repositories/system:/snappy/SLE_15/system:snappy.repo && \
    zypper -n addrepo --refresh https://download.opensuse.org/repositories/devel:tools:scm/SLE_15_SP3/devel:tools:scm.repo && \
    zypper -n --gpg-auto-import-keys ref

# Install packages
RUN zypper -n install cmake wget curl git less file \
        libglib-2_0-0 libkmod-devel libnl3-devel linux-glibc-devel pkg-config \
        psmisc tox qemu-tools fuse python3-devel git zlib-devel zlib-devel-static \
        bash-completion rdma-core-devel libibverbs xsltproc docbook-xsl-stylesheets \
        perl-Config-General libaio-devel glibc-devel-static glibc-devel iptables libltdl7 libdevmapper1_03 iproute2 jq docker gcc gcc-c++ \
        autoconf libtool libunwind-devel && \
        rm -rf /var/cache/zypp/*

# needed for ${!var} substitution
RUN rm -f /bin/sh && ln -s /bin/bash /bin/sh

RUN if [ ${ARCH} == "s390x" ]; then \
        ln -s /usr/bin/gcc /usr/bin/s390x-linux-gnu-gcc;\
    fi

# Install Go & tools
ENV GOLANG_ARCH_amd64=amd64 GOLANG_ARCH_arm64=arm64 GOLANG_ARCH_s390x=s390x GOLANG_ARCH=GOLANG_ARCH_${ARCH} \
    GOPATH=/go PATH=/go/bin:/usr/local/go/bin:${PATH} SHELL=/bin/bash
RUN wget -O - https://storage.googleapis.com/golang/go1.14.15.linux-${!GOLANG_ARCH}.tar.gz | tar -xzf - -C /usr/local && \
    go get github.com/rancher/trash && go get -u golang.org/x/lint/golint

# Build jemalloc
RUN if [ ${ARCH} == "amd64" ]; then \
        cd /usr/src && \
        git clone https://github.com/jemalloc/jemalloc.git && \
        cd jemalloc && \
        git checkout 54eaed1d8b56b1aa528be3bdd1877e59c56fa90c && \
        ./autogen.sh && \
        make && \
        make install; \
    fi

RUN ldconfig

# Build liblonghorn
RUN cd /usr/src && \
    git clone https://github.com/derekbit/liblonghorn.git && \
    cd liblonghorn && \
    git checkout 5878aa9f64de04953a7cbddfa473023f9623c136 && \
    if [ ${ARCH} == "amd64" ]; then \
        make EXTRA_LIBS=/usr/local/lib/libjemalloc.a; \
    else \
        make; \
    fi; \
    make install

# Build TGT
RUN cd /usr/src && \
    git clone https://github.com/derekbit/tgt.git && \
    cd tgt && \
    git checkout db72266aa0a736ad972234016398b5bf19752676 && \
    if [ ${ARCH} == "amd64" ]; then \
        make EXTRA_LIBS=-ljemalloc; \
    else \
        make; \
    fi; \
    make install

# Install libqcow to resolve error:
#   vendor/github.com/longhorn/longhorn-engine/pkg/qcow/libqcow.go:6:11: fatal error: libqcow.h: No such file or directory
RUN wget -O - https://s3-us-west-1.amazonaws.com/rancher-longhorn/libqcow-alpha-20181117.tar.gz | tar xvzf - -C /usr/src
RUN cd /usr/src/libqcow-20181117 && \
    ./configure
RUN cd /usr/src/libqcow-20181117 && \
    make -j$(nproc) && \
    make install
RUN ldconfig

VOLUME /tmp
ENV TMPDIR /tmp
ENTRYPOINT ["./scripts/entry"]
CMD ["ci"]
